"use strict";function _defineProperty(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Node(t,e){this.value=t,this.parent=e,this.height=0,e&&(this.height=e.height+1)}var _Node$prototype,_createClass=function(){function t(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,i,r){return i&&t(e.prototype,i),r&&t(e,r),e}}(),AVLTree=function(){function t(e){_classCallCheck(this,t),e&&(this.root=new Node(e))}return _createClass(t,[{key:"insert",value:function(t){return this.root?this.root.insert(t):this.root=new Node(t),this.root.update(),this.balance(),this}},{key:"rotateRight",value:function(t){this.root.get(t).rotateRight(this),this.root.update()}},{key:"rotateLeft",value:function(t){this.root.get(t).rotateLeft(this),this.root.update()}},{key:"balance",value:function(){var t,e=0;this.root.posOrder(function(i){Math.abs(i.balancing)>=2&&(e++,1==e&&(t=i))}),0!=e&&(t.balancing<0?t.left.balancing<0?this.rotateRight(t.value):this.doubleRotateLeft(t.value):t.right.balancing>0?this.rotateLeft(t.value):this.doubleRotateRight(t.value),this.balance())}},{key:"doubleRotateLeft",value:function(t){var e=this.root.get(t);e.left.rotateLeft(this),e.rotateRight(this),this.root.update()}},{key:"doubleRotateRight",value:function(t){var e=this.root.get(t);e.right.rotateRight(this),e.rotateLeft(this),this.root.update()}},{key:"preOrder",value:function(t){this.root.preOrder(t)}}]),t}();Node.prototype=(_Node$prototype={updateHeight:function(){var t=0;return this.left&&(t=this.left.updateHeight()),this.right&&this.right.updateHeight()>t&&(t=this.right.height),t+=1,this.height=t,t},rotateLeft:function(t){var e=this.right,i=e.left;if(e.left=this,this.parent){var r=this.parent.left==this?"left":"right";this.parent[r]=e}else t.root=e,e.parent=null;e.parent=this.parent,null==this.parent&&(t.root=e),this.parent=e,this.left=i,i&&(i.parent=this)},rotateRight:function(t){var e=this.left;if(this.parent){var i=this.parent.left==this?"left":"right";this.parent[i]=e,e.parent=this.parent}else t.root=e,e.parent=null;this.left=e.right,this.left&&(this.left.parent=this),e.right=this,this.parent=e},isLeaf:function(){return!this.left&&!this.right},countNodes:function(){if(this.isLeaf())return 1;var t=1;return this.left&&(t+=this.left.countNodes()),this.right&&(t+=this.right.countNodes()),t},countChilds:function(){return this.countNodes()-1},posOrder:function(t){this.left&&this.left.posOrder(),this.right&&this.right.posOrder(),t(this)},update:function(){this.updateHeight(),this.updateBalancing()},updateBalancing:function(){var t=0;this.right&&(t=this.right.height,this.right.updateBalancing()),this.left&&(t-=this.left.height,this.left.updateBalancing()),this.balancing=t},hasValue:function(t){return this.value==t||(t<this.value?!!this.left&&this.left.hasValue(t):t>this.value?!!this.right&&this.right.hasValue(t):void 0)},insert:function(t){return t>this.value&&(this.right?this.right.insert(t):this.right=new Node(t,this)),t<this.value&&(this.left?this.left.insert(t):this.left=new Node(t,this)),this.update(),this},get:function(t){return this.hasValue(t)?t==this.value?this:t<this.value?this.left.get(t):t>this.value?this.right.get(t):void 0:null},biggest:function(){return this.right?this.right.biggest():this},smallest:function(){return this.left?this.left.smallest():this},successor:function(){return this.right?this.right.smallest():null},antecessor:function(){return this.left?this.left.biggest():null},preOrder:function(t){t(this),this.left&&this.left.preOrder(t),this.right&&this.right.preOrder(t)}},_defineProperty(_Node$prototype,"posOrder",function(t){this.left&&this.left.posOrder(t),this.right&&this.right.posOrder(t),t(this)}),_defineProperty(_Node$prototype,"getUnbalanceds",function(){var t=[];return this.update(),this.preOrder(function(e){Math.abs(e.balancing)>=2&&t.push(e)}),t}),_Node$prototype),module.exports=AVLTree;
